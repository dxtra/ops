
nameOverride: "clearml-chill"
fullnameOverride: "clearml-chill"
replicaCount: 1
rbac:
  enabled: true
command:
  - sh
  - -xc
  - |
    pip install --no-cache-dir kubernetes prometheus-api-client pytz
    exec python /app/chill.py
image:
  repository: mirror.gcr.io/python
  tag: 3.11
  pullPolicy: IfNotPresent
  #pullSecrets: [{"name": "regcred"}]
env:
  - name: KUBEAPI_TIMEZONE
    value: 'UTC'
  - name: PYTHONUNBUFFERED
    value: "1"
  - name: PROMETHEUS_URL
    value: "http://kube-prometheus-stack-prometheus.prometheus:9090/"
  - name: WATCH_NAMESPACE
    value: "clearml"
#  - name: WATCH_LABEL_SECELTOR
#    value: "clearml-agent-queue-name" # kubeapi pod filter (optional, take all and filter by POD_NAME_REGEX if empty)
  - name: POD_NAME_REGEX
    value: "^clearml-id-.+" # prometheus pod filter
  - name: WATCH_CYCLE_TIMEOUT_SECONDS
    value: "10"
  - name: CPU_USAGE_CHILL_WINDOW
    value: "30m" # check cpu usage of last 30 min
  - name: CPU_USAGE_CHILL_THRESHOLD
    value: "0.03" # chill pods that use less than 3% cpu in every 2min interval for CPU_USAGE_CHILL_WINDOW
  - name: CHILL_POD_MINIMUM_AGE_SECONDS
    value: "300" # don't chill very young pods
  - name: DRY_RUN
    value: "true"

files:
  - path: /app/chill.py
    value: |
      from prometheus_api_client import PrometheusConnect
      from prometheus_api_client.utils import parse_datetime
      from kubernetes import client, config
      import os, time, pytz, re
      from datetime import datetime, timedelta

      prom = PrometheusConnect(url=os.environ.get('PROMETHEUS_URL'), disable_ssl=True)
      config.load_incluster_config()
      v1 = client.CoreV1Api()
      tz = pytz.timezone(os.environ.get('KUBEAPI_TIMEZONE'))
      dry_run = bool(os.environ.get('DRY_RUN'))

      while True:
          print(f'=== DRY_RUN = {dry_run} =======================================')
          cpu_usage_metrics = prom.custom_query_range(
              '''
                  sum by (namespace, pod) (
                      rate(
                          container_cpu_usage_seconds_total{
                              namespace=~"''' + os.environ.get('WATCH_NAMESPACE') + '''",
                              pod=~"''' + os.environ.get('POD_NAME_REGEX') + '''",
                              container!=""
                          }
                      [2m])
                  )
              ''',
              start_time=parse_datetime(os.environ.get('CPU_USAGE_CHILL_WINDOW')),
              end_time=parse_datetime("now"),
              step="2m"
          )
          print(f'prometheus: got cpu usage metrics for {len(cpu_usage_metrics)} pods matching POD_NAME_REGEX')
          cpu_by_pod = {}
          for m in cpu_usage_metrics:
              cpu_by_pod[m['metric']['pod']] = [round(float(v[1]), 3) for v in m['values']]

          pod_list = v1.list_namespaced_pod(os.environ.get('WATCH_NAMESPACE'), label_selector=os.environ.get('WATCH_LABEL_SECELTOR')).items
          print(f'kubeapi: got info for {len(pod_list)} pods matching WATCH_LABEL_SECELTOR')

          pod_list = [p for p in pod_list if re.search(os.environ.get('POD_NAME_REGEX'), p.metadata.name) ]
          print(f'kubeapi: got info for {len(pod_list)} pods matching POD_NAME_REGEX')

          for pod in pod_list:
              print('------------------------------')
              print(f"{pod.metadata.name} - [{pod.status.phase}] - started at {pod.status.start_time} in queue '{pod.metadata.labels.get('clearml-agent-queue-name')}'")
              pod_running_time = datetime.now().replace(tzinfo=tz) - pod.status.start_time.replace(tzinfo=tz)
              if pod_running_time < timedelta(seconds=int(os.environ.get('CHILL_POD_MINIMUM_AGE_SECONDS'))):
                  print(f"pod {pod.metadata.name} is running for less than 5 min, skip it")
                  continue
              if pod.metadata.name not in cpu_by_pod:
                  print(f"cannot find cpu usage for pod {pod.metadata.name}, skip it")
                  continue
              cpu_usage_metrics = cpu_by_pod.get(pod.metadata.name, [])
              cpu_usage_avg = round(sum(cpu_usage_metrics) / len(cpu_usage_metrics), 3)
              #
              pod_cpu_usage_is_low = not any([c for c in cpu_usage_metrics if c > float(os.environ.get('CPU_USAGE_CHILL_THRESHOLD'))])
              #
              print(f"  running for {pod_running_time}")
              print(f"  cpu usage metrics {cpu_usage_metrics}")
              print(f"  cpu usage avg - {cpu_usage_avg}")
              print(f"  pod needs to chill because of cpu usage - {pod_cpu_usage_is_low}")
              if pod_cpu_usage_is_low and not dry_run:
                  print(f'  =======> DELETE pod {pod.metadata.name}')
                  r = v1.delete_namespaced_pod(pod.metadata.name, pod.metadata.namespace)
          print(f"end cycle, wait for {os.environ.get('WATCH_CYCLE_TIMEOUT_SECONDS')}")
          print()
          if os.environ.get('ONE_CYCLE'):
              break
          time.sleep(int(os.environ.get('WATCH_CYCLE_TIMEOUT_SECONDS')))


resources:
  requests:
    memory: "200Mi"
    cpu: "50m"
  limits:
    memory: "200Mi"
    cpu: "1000m"
revisionHistoryLimit: 2
minReadySeconds: 10
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1
podAnnotations: {}
podSecurityContext: {}
startupProbe: {}
livenessProbe: {}
readinessProbe: {}
ports: []
nodeSelector: {}
tolerations: []
affinity: {}
